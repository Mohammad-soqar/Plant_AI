import 'package:flutter/material.dart';
import 'package:plantai/data/models/plant.dart';
import 'package:plantai/viewmodels/add_edit_plant_viewmodel.dart';
import 'package:provider/provider.dart';

class AddEditPlantView extends StatefulWidget {
  const AddEditPlantView({Key? key}) : super(key: key);

  @override
  _AddEditPlantViewState createState() => _AddEditPlantViewState();
}

class _AddEditPlantViewState extends State<AddEditPlantView> {
  final _formKey = GlobalKey<FormState>();
  final _plantNameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _wateringFrequencyController = TextEditingController();
  final _wateringAmountController = TextEditingController();
  final _plantTypeController = TextEditingController();
  DateTime? _lastWateredDate;
  DateTime? _nextWateringDate;

  @override
  void dispose() {
    _plantNameController.dispose();
    _descriptionController.dispose();
    _wateringFrequencyController.dispose();
    _wateringAmountController.dispose();
    _plantTypeController.dispose();
    super.dispose();
  }

  void _submitForm(AddEditPlantViewModel viewModel) async {
    if (_formKey.currentState!.validate()) {
      final plant = Plant(
        plantId: '', // Auto-generated by Firestore
        plantName: _plantNameController.text.trim(),
        wateringFrequency: _wateringFrequencyController.text.trim(),
        wateringAmount: _wateringAmountController.text.trim(),
        lastWateredDate: _lastWateredDate ?? DateTime.now(),
        nextWateringDate: _nextWateringDate ?? DateTime.now(),
        wateringStatus: 'On Schedule', 
        growthStage: 'Seedling', 
        waterReminderEnabled: true, 
      );

      await viewModel.addPlant(plant);

      if (viewModel.errorMessage == null) {
        // Show success message
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Plant added successfully!')),
        );
        Navigator.pop(context); // Go back to the previous screen
      } else {
        // Show error message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(viewModel.errorMessage!)),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final viewModel = Provider.of<AddEditPlantViewModel>(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Plant'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _plantNameController,
                decoration: const InputDecoration(labelText: 'Plant Name'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the plant name';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'Description'),
              ),
              TextFormField(
                controller: _plantTypeController,
                decoration: const InputDecoration(labelText: 'Plant Type'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the plant type';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _wateringFrequencyController,
                decoration:
                    const InputDecoration(labelText: 'Watering Frequency'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the watering frequency';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _wateringAmountController,
                decoration: const InputDecoration(labelText: 'Watering Amount'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the watering amount';
                  }
                  return null;
                },
              ),
              ListTile(
                title: const Text('Last Watered Date'),
                subtitle: Text(
                  _lastWateredDate != null
                      ? _lastWateredDate!.toLocal().toString().split(' ')[0]
                      : 'Select Date',
                ),
                trailing: const Icon(Icons.calendar_today),
                onTap: () async {
                  final pickedDate = await showDatePicker(
                    context: context,
                    initialDate: DateTime.now(),
                    firstDate: DateTime(2000),
                    lastDate: DateTime(2100),
                  );
                  if (pickedDate != null) {
                    setState(() {
                      _lastWateredDate = pickedDate;
                    });
                  }
                },
              ),
              ListTile(
                title: const Text('Next Watering Date'),
                subtitle: Text(
                  _nextWateringDate != null
                      ? _nextWateringDate!.toLocal().toString().split(' ')[0]
                      : 'Select Date',
                ),
                trailing: const Icon(Icons.calendar_today),
                onTap: () async {
                  final pickedDate = await showDatePicker(
                    context: context,
                    initialDate: DateTime.now(),
                    firstDate: DateTime(2000),
                    lastDate: DateTime(2100),
                  );
                  if (pickedDate != null) {
                    setState(() {
                      _nextWateringDate = pickedDate;
                    });
                  }
                },
              ),
              if (viewModel.isLoading)
                const Center(child: CircularProgressIndicator()),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: viewModel.isLoading ? null : () => _submitForm(viewModel),
                child: const Text('Add Plant'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
